{
	"info": {
		"_postman_id": "ae0297b8-de36-4ade-b3cc-60740fb1e2c8",
		"name": "CMS ASPSP API requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Export",
			"item": [
				{
					"name": "AIS",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e875b7ad-3c8b-4f08-b713-0ab4ebb3dbbb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Creates AIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6f709a09-78fc-40ce-8274-dc29bbcd560e",
										"exec": [
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27c858ba-9ceb-426a-8e5d-438f019c0598",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"pm.test(\"scaRedirect link is present\", () => {",
											"    pm.expect(scaRedirectLink).not.eq(undefined);",
											"});",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    const redirectLinkParts = scaRedirectLink.split('/');",
											"    redirectLinkParts.pop();",
											"    const redirectId = redirectLinkParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "*/*",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "date",
										"value": "Sun, 11 Aug 2019 15:02:37 GMT",
										"type": "text"
									},
									{
										"key": "x-request-id",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "Tpp-Redirect-Uri",
										"value": "some.redirect.uri",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"access\": {\n        \"accounts\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_none}}\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_none}}\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_none}}\"\n            }\n        ]\n    },\n    \"combinedServiceIndicator\": false,\n    \"frequencyPerDay\": 400,\n    \"recurringIndicator\": true,\n    \"validUntil\": \"2021-12-31\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								},
								"description": "This method create a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts are addressed explicitly in the method as parameters as a core function. Side Effects When this Consent Request is a request where the “recurringIndicator” equals \"true\", and if it exists already a former consent for recurring access on account information for the addressed PSU, then the former consent automatically expires as soon as the new consent request is authorised by the PSU. Optional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all psd2 related services for all available accounts. As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and ASPSP. This option is supported only within the Decoupled, OAuth2 or Re-direct SCA Approach. As a last option, an ASPSP might in addition accept a command with access rights * to see the list of available payment accounts or * to see the list of available payment accounts with balances."
							},
							"response": []
						},
						{
							"name": "3. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const consentId = jsonData.accountConsent.id;",
											"pm.globals.set(\"consent_id\", consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c392a0-5596-483d-97c9-dd88f0c154b4",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Export AIS consents by PSU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fc4e0ae-01a7-4e91-826a-f200e684188d",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent is present\", () => {",
											"    const consent = jsonData.find(consent => {",
											"        return consent.id === pm.globals.get(\"consent_id\");",
											"    });",
											"    pm.expect(consent).not.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7a63bd2-7b8f-44d9-91f4-cf140c8d520c",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth()+1; ",
											"var yyyy_end = end.getFullYear();",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth()+1; ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "some type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID- Type",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Start-Date",
										"value": "{{startFormat}}",
										"type": "text"
									},
									{
										"key": "End-Date",
										"value": "{{endFormat}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/ais/consents/psu",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"ais",
										"consents",
										"psu"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Export AIS consents by TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f59f5dd-041d-42be-92ed-fe274441dc35",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent is present\", () => {",
											"    const consent = jsonData.find(consent => {",
											"        return consent.id === pm.globals.get(\"consent_id\");",
											"    });",
											"    pm.expect(consent).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "44d2b66e-ee81-436f-bafd-002ecdcbbe0d",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth()+1; ",
											"var yyyy_end = end.getFullYear();",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth()+1; ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "some type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID- Type",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Start-Date",
										"value": "{{startFormat}}",
										"type": "text"
									},
									{
										"key": "End-Date",
										"value": "{{endFormat}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/ais/consents/tpp/{{tpp_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"ais",
										"consents",
										"tpp",
										"{{tpp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Export AIS consents by ASPSP account ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8963198-16f3-488f-8500-a7b08aa353e9",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "101feacd-60b5-4758-8781-a572f710c448",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth()+1; ",
											"var yyyy_end = end.getFullYear();",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth()+1; ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Start-Date",
										"value": "{{startFormat}}",
										"type": "text"
									},
									{
										"key": "End-Date",
										"value": "{{endFormat}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/ais/consents/account/{{aspsp_account_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"ais",
										"consents",
										"account",
										"{{aspsp_account_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PIS",
					"item": [
						{
							"name": "1. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e875b7ad-3c8b-4f08-b713-0ab4ebb3dbbb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  \"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "1. Initiate payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96d686a3-5f56-4cd2-b043-50dc3bf36d7c",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Transaction status is RCVD\", () => {",
											"    pm.expect(jsonData.transactionStatus).to.eql('RCVD');",
											"});",
											"",
											"const scaRedirectLink = jsonData._links.scaRedirect.href;",
											"",
											"pm.test(\"scaRedirect link is present\", () => {",
											"    pm.expect(scaRedirectLink).not.eq(undefined);",
											"});",
											"",
											"if (scaRedirectLink !== undefined) {",
											"    const redirectLinkParts = scaRedirectLink.split('/');",
											"    redirectLinkParts.pop();",
											"    const redirectId = redirectLinkParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4cbc456-5fd9-4fd5-a8cc-c601b228c824",
										"exec": [
											"pm.globals.unset(\"redirect_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-IP-Address",
										"value": "{{ip_address}}"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									},
									{
										"key": "Tpp-Redirect-Uri",
										"value": "some.redirect.uri",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"endToEndIdentification\": \"RI-1234567890\",\n\"debtorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"{{iban_none}}\"\n },\n\"instructedAmount\": {\n  \"amount\": 1000,\n  \"currency\": \"EUR\"\n },\n\"creditorAccount\": {\n  \"currency\": \"EUR\",\n  \"iban\": \"{{iban_none}}\"\n },\n\"creditorAgent\": \"AAAADEBBXXX\",\n\"creditorName\": \"Telekom\",\n \"creditorAddress\": {\n  \"buildingNumber\": \"123-34\",\n  \"townName\": \"Nürnberg\",\n  \"country\": \"DE\",\n  \"postCode\": 90431,\n  \"streetName\": \"Herrnstraße\"\n },\n \"remittanceInformationUnstructured\": \"Ref. Number TELEKOM-1222\"\n }"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/{{payment_service}}/{{payment_product}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"{{payment_service}}",
										"{{payment_product}}"
									]
								},
								"description": "This method is used to initiate a payment at the ASPSP.  ## Variants of Payment Initiation Requests  This method to initiate a payment initiation at the ASPSP can be sent with either a JSON body or an pain.001 body depending on the payment product in the path.  There are the following **payment products**:    - Payment products with payment information in *JSON* format:     - ***sepa-credit-transfers***     - ***instant-sepa-credit-transfers***     - ***target-2-payments***     - ***cross-border-credit-transfers***   - Payment products with payment information in *pain.001* XML format:     - ***pain.001-sepa-credit-transfers***     - ***pain.001-instant-sepa-credit-transfers***     - ***pain.001-target-2-payments***     - ***pain.001-cross-border-credit-transfers***  Furthermore the request body depends on the **payment-service**   * ***payments***: A single payment initiation request.   * ***bulk-payments***: A collection of several payment iniatiation requests.        In case of a *pain.001* message there are more than one payments contained in the *pain.001 message.          In case of a *JSON* there are several JSON payment blocks contained in a joining list.   * ***periodic-payments***:      Create a standing order initiation resource for recurrent i.e. periodic payments addressable under {paymentId}       with all data relevant for the corresponding payment product and the execution of the standing order contained in a JSON body.   This is the first step in the API to initiate the related recurring/periodic payment.    ## Single and mulitilevel SCA Processes  The Payment Initiation Requests are independent from the need of one ore multilevel  SCA processing, i.e. independent from the number of authorisations needed for the execution of payments.   But the response messages are specific to either one SCA processing or multilevel SCA processing.   For payment initiation with multilevel SCA, this specification requires an explicit start of the authorisation,  i.e. links directly associated with SCA processing like 'scaRedirect' or 'scaOAuth' cannot be contained in the  response message of a Payment Initation Request for a payment, where multiple authorisations are needed.  Also if any data is needed for the next action, like selecting an SCA method is not supported in the response,  since all starts of the multiple authorisations are fully equal.  In these cases, first an authorisation sub-resource has to be generated following the 'startAuthorisation' link. "
							},
							"response": []
						},
						{
							"name": "2. Get payment response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const paymentId = jsonData.payment.paymentId;",
											"pm.globals.set(\"payment_id\", paymentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "39c392a0-5596-483d-97c9-dd88f0c154b4",
										"exec": [
											"pm.globals.unset(\"payment_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/payment/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"payment",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Export payments by PSU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86bab0dd-e498-46af-9e9a-4d95045a71eb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Payment is present\", () => {",
											"    const payment = jsonData.find(payment => {",
											"        return payment.paymentId === pm.globals.get(\"payment_id\"); ",
											"    });",
											"    pm.expect(payment).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1620a4e5-e064-4703-88a4-5997c344188a",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth()+1; ",
											"var yyyy_end = end.getFullYear();",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth()+1; ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "some type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID- Type",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Start-Date",
										"value": "{{startFormat}}",
										"type": "text"
									},
									{
										"key": "End-Date",
										"value": "{{endFormat}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/pis/payments/psu",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"pis",
										"payments",
										"psu"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Export payments by TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93ed30d3-adab-4414-9e67-fed722ce52a3",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Payment is present\", () => {",
											"    const payment = jsonData.find(payment => {",
											"        return payment.paymentId === pm.globals.get(\"payment_id\"); ",
											"    });",
											"    pm.expect(payment).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "609e8616-6664-4e38-a9b5-f76375b9c7d1",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth()+1; ",
											"var yyyy_end = end.getFullYear();",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth()+1; ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "some type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID- Type",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Start-Date",
										"value": "{{startFormat}}",
										"type": "text"
									},
									{
										"key": "End-Date",
										"value": "{{endFormat}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/pis/payments/tpp/{{tpp_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"pis",
										"payments",
										"tpp",
										"{{tpp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Export payments by ASPSP account ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f657fd3-a1f8-46d0-9353-3dd20817e115",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1f2e06a-1ba5-4143-9302-291e37d552ab",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth()+1; ",
											"var yyyy_end = end.getFullYear();",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth()+1; ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Start-Date",
										"value": "{{startFormat}}",
										"type": "text"
									},
									{
										"key": "End-Date",
										"value": "{{endFormat}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/pis/payments/account/{{aspsp_account_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"pis",
										"payments",
										"account",
										"{{aspsp_account_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PIIS",
					"item": [
						{
							"name": "1. Create PIIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e5fd63e-5f0d-4f77-bac6-5daac4e22b5b",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c974304c-f1b8-4e0b-ad13-5edfcc4011d2",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const consentId = jsonData.consentId;",
											"pm.globals.set(\"consent_id\", consentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account\": \n    {\n      \"currency\": \"EUR\",\n      \"iban\": \"LU280019400644750000\",\n      \"aspspAccountId\": \"{{aspsp_account_id}}\"\n    },\n  \"tppAuthorisationNumber\": \"{{tpp_id}}\",\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Export PIIS consents by PSU",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a285434-eaf2-4c38-b984-fabd7fa7524e",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent is present\", () => {",
											"    const consent = jsonData.find(consent => {",
											"        return consent.id === pm.globals.get(\"consent_id\"); ",
											"    });",
											"    pm.expect(consent).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									},
									{
										"key": "PSU-ID-Type",
										"value": "some type",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID- Type",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Start-Date",
										"value": "2019-01-01",
										"type": "text",
										"disabled": true
									},
									{
										"key": "End-Date",
										"value": "2019-01-16",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/psu",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										"psu"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Export PIIS consents by TPP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "069929dc-82a1-4c6e-8d01-edefda01ae5c",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent is present\", () => {",
											"    const consent = jsonData.find(consent => {",
											"        return consent.id === pm.globals.get(\"consent_id\"); ",
											"    });",
											"    pm.expect(consent).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}",
										"disabled": true
									},
									{
										"key": "PSU-ID-Type",
										"type": "text",
										"value": "some type",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID",
										"type": "text",
										"value": "",
										"disabled": true
									},
									{
										"key": "PSU-Corporate-ID- Type",
										"type": "text",
										"value": "",
										"disabled": true
									},
									{
										"key": "Start-Date",
										"type": "text",
										"value": "2019-01-01",
										"disabled": true
									},
									{
										"key": "End-Date",
										"type": "text",
										"value": "2019-01-16",
										"disabled": true
									},
									{
										"key": "Instance-ID",
										"type": "text",
										"value": "UNDEFINED",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/tpp/{{tpp_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										"tpp",
										"{{tpp_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Export PIIS consents by ASPSP account id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8c082e8-5356-46a1-b95c-4e9f403ca7ba",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01805dda-cb75-4402-abac-e17e4cb10c09",
										"exec": [
											"",
											"var end = new Date();",
											"",
											"",
											"var dd_end = end.getDate();",
											"var mm_end = end.getMonth()+1; ",
											"var yyyy_end = end.getFullYear();",
											"if(dd_end<10) ",
											"{",
											"    dd_end='0'+dd_end;",
											"} ",
											"",
											"if(mm_end<10) ",
											"{",
											"    mm_end='0'+mm_end;",
											"} ",
											"//==========================",
											"var start = new Date(end-(3600*24*1000));",
											"var dd_start = start.getDate();",
											"var mm_start = start.getMonth()+1; ",
											"var yyyy_start = start.getFullYear();",
											"if(dd_start<10) ",
											"{",
											"    dd_start='0'+dd_start;",
											"} ",
											"",
											"if(mm_start<10) ",
											"{",
											"    mm_start='0'+mm_start;",
											"} ",
											"",
											"var endFormat= yyyy_end+'-'+ mm_end  +'-'+dd_end;",
											"var startFormat= yyyy_start+'-'+ mm_start  +'-'+dd_start;",
											"",
											"",
											"console.log(\"startFormat : \"+ startFormat);",
											"console.log(\"endFormat : \"+ endFormat);",
											"",
											"pm.globals.set(\"startFormat\", startFormat);",
											"pm.globals.set(\"endFormat\", endFormat);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Start-Date",
										"value": "{{startFormat}}",
										"type": "text"
									},
									{
										"key": "End-Date",
										"value": "{{endFormat}}",
										"type": "text"
									},
									{
										"key": "Instance-ID",
										"value": "UNDEFINED",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/account/{{aspsp_account_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										"account",
										"{{aspsp_account_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PIIS Consents",
			"item": [
				{
					"name": "Implicit revocation",
					"item": [
						{
							"name": "1. Create PIIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e5fd63e-5f0d-4f77-bac6-5daac4e22b5b",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c974304c-f1b8-4e0b-ad13-5edfcc4011d2",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentId = jsonData.consentId;",
											"",
											"pm.test(\"Consent ID is present\", () => {",
											"    pm.expect(consentId).not.eql(undefined);",
											"});",
											"",
											"pm.globals.set(\"consent_id\", consentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"currency\": \"EUR\",\n        \"iban\": \"{{iban_none}}\",\n        \"aspspAccountId\": \"{{aspsp_account_id}}\"\n    },\n    \"tppAuthorisationNumber\": \"{{tpp_id}}\",\n    \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get PIIS consent by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ce3ac9f-0ba6-4507-aca2-1204d87765d8",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentStatus = jsonData.consentStatus;",
											"",
											"pm.test(\"Consent status is VALID\", () => {",
											"    pm.expect(consentStatus).to.eql(\"VALID\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create another PIIS consent with same PSU and TPP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e5fd63e-5f0d-4f77-bac6-5daac4e22b5b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c974304c-f1b8-4e0b-ad13-5edfcc4011d2",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentId = jsonData.consentId;",
											"",
											"pm.test(\"Consent ID is present\", () => {",
											"    pm.expect(consentId).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"currency\": \"EUR\",\n        \"iban\": \"{{iban_none}}\",\n        \"aspspAccountId\": \"{{aspsp_account_id}}\"\n    },\n    \"tppAuthorisationNumber\": \"{{tpp_id}}\",\n    \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Get first PIIS consent by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b727f1bb-e45f-4759-8144-77d1e1c5dfea",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentStatus = jsonData.consentStatus;",
											"",
											"pm.test(\"Consent status is REVOKED_BY_PSU\", () => {",
											"    pm.expect(consentStatus).to.eql(\"REVOKED_BY_PSU\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "079f5a95-b9d9-47bd-88cc-94fd391ca51e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9048598-8f5f-432c-9359-77f21bcbc24e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Implicit revocation for terminated consent",
					"item": [
						{
							"name": "1. Create PIIS consent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e5fd63e-5f0d-4f77-bac6-5daac4e22b5b",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c974304c-f1b8-4e0b-ad13-5edfcc4011d2",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentId = jsonData.consentId;",
											"",
											"pm.test(\"Consent ID is present\", () => {",
											"    pm.expect(consentId).not.eql(undefined);",
											"});",
											"",
											"pm.globals.set(\"consent_id\", consentId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"currency\": \"EUR\",\n        \"iban\": \"{{iban_none}}\",\n        \"aspspAccountId\": \"{{aspsp_account_id}}\"\n    },\n    \"tppAuthorisationNumber\": \"{{tpp_id}}\",\n    \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Terminate PIIS consent by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1c7406b-140b-4e8c-95b2-dec5309c9fc1",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response body is true\", () => {",
											"    pm.expect(jsonData).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"description": "ID of the particular service instance",
										"key": "instance-id",
										"value": "UNDEFINED"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": [
								{
									"name": "No Content",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "ID of the particular service instance",
													"type": "text/plain"
												},
												"key": "instance-id",
												"value": "UNDEFINED"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/aspsp-api/v1/piis/consents/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												"<string>"
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "ID of the particular service instance",
													"type": "text/plain"
												},
												"key": "instance-id",
												"value": "UNDEFINED"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/aspsp-api/v1/piis/consents/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												"<string>"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "ID of the particular service instance",
													"type": "text/plain"
												},
												"key": "instance-id",
												"value": "UNDEFINED"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/aspsp-api/v1/piis/consents/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												"<string>"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "ID of the particular service instance",
													"type": "text/plain"
												},
												"key": "instance-id",
												"value": "UNDEFINED"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/aspsp-api/v1/piis/consents/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												"<string>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "ID of the particular service instance",
													"type": "text/plain"
												},
												"key": "instance-id",
												"value": "UNDEFINED"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/aspsp-api/v1/piis/consents/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"aspsp-api",
												"v1",
												"piis",
												"consents",
												"<string>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "<boolean>"
								}
							]
						},
						{
							"name": "3. Get PIIS consent by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ce3ac9f-0ba6-4507-aca2-1204d87765d8",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentStatus = jsonData.consentStatus;",
											"",
											"pm.test(\"Consent status is TERMINATED_BY_ASPSP\", () => {",
											"    pm.expect(consentStatus).to.eql(\"TERMINATED_BY_ASPSP\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Create another PIIS consent with same PSU and TPP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e5fd63e-5f0d-4f77-bac6-5daac4e22b5b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c974304c-f1b8-4e0b-ad13-5edfcc4011d2",
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentId = jsonData.consentId;",
											"",
											"pm.test(\"Consent ID is present\", () => {",
											"    pm.expect(consentId).not.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "PSU-ID",
										"type": "text",
										"value": "{{psu_id_none}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"account\": {\n        \"currency\": \"EUR\",\n        \"iban\": \"{{iban_none}}\",\n        \"aspspAccountId\": \"{{aspsp_account_id}}\"\n    },\n    \"tppAuthorisationNumber\": \"{{tpp_id}}\",\n    \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/aspsp-api/v1/piis/consents/",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"aspsp-api",
										"v1",
										"piis",
										"consents",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Get first PIIS consent by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b727f1bb-e45f-4759-8144-77d1e1c5dfea",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"const consentStatus = jsonData.consentStatus;",
											"",
											"pm.test(\"Consent status is still TERMINATED_BY_ASPSP\", () => {",
											"    pm.expect(consentStatus).to.eql(\"TERMINATED_BY_ASPSP\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "PSU-ID",
										"value": "{{psu_id_none}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/piis/consents/{{consent_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"piis",
										"consents",
										"{{consent_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "AIS Consents",
			"item": [
				{
					"name": "Consent Bank offered with owner name",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67af457a-0c1a-44da-8b16-9af106584c29",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n      \"consentTypes\": {\n        \"bankOfferedConsentSupported\": true,\n        \"globalConsentSupported\": false,\n        \"availableAccountsConsentSupported\": true,\n        \"accountAccessFrequencyPerDay\": 4,\n        \"notConfirmedConsentExpirationTimeMs\": 86400000,\n        \"maxConsentValidityDays\": 0,\n        \"accountOwnerInformationSupported\": true\n      },\n      \"redirectLinkToOnlineBanking\": {\n        \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n      },\n      \"transactionParameters\": {\n        \"availableBookingStatuses\": [\n          \"BOTH\"\n        ],\n        \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n      },\n      \"deltaReportSettings\": {\n        \"entryReferenceFromSupported\": false,\n        \"deltaListSupported\": false\n      },\n      \"scaRequirementsForOneTimeConsents\": {\n        \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n      }\n    },\n    \"pis\": {\n      \"supportedPaymentTypeAndProductMatrix\": {\n        \"payments\": [\n          \"sepa-credit-transfers\",\n          \"instant-sepa-credit-transfers\"\n        ]\n      },\n      \"maxTransactionValidityDays\": 0,\n      \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n      \"paymentCancellationAuthorisationMandated\": false,\n      \"redirectLinkToOnlineBanking\": {\n        \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n        \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n        \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n      },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n      \"piisConsentSupported\": false\n    },\n    \"common\": {\n      \"scaRedirectFlow\": \"REDIRECT\",\n      \"startAuthorisationMode\": \"auto\",\n      \"tppSignatureRequired\": false,\n      \"psuInInitialRequestMandated\": false,\n      \"redirectUrlExpirationTimeMs\": 600000,\n      \"authorisationExpirationTimeMs\": 86400000,\n      \"forceXs2aBaseLinksUrl\": false,\n      \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n      \"supportedAccountReferenceFields\": [\n        \"IBAN\"\n      ],\n      \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n      \"aisPisSessionsSupported\": false,\n      \"signingBasketSupported\": false,\n      \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n      ],\n     \t\"authorisationConfirmationRequestMandated\": false,\n      \"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e875b7ad-3c8b-4f08-b713-0ab4ebb3dbbb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce918dd0-6631-4518-b6f5-fdc4f308740a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaRedirect link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaRedirect = _links.scaRedirect.href;",
											"",
											"    if (scaRedirect === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaRedirect !== undefined) {",
											"        var a = scaRedirect.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b421d8cf-914b-4f0f-906d-198ed1045657",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n        \"accounts\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"additionalInformation\": {\n            \"ownerName\": [\n                {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n            ]\n        }\n    },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"Owner name is present\", ()=> {",
											"    pm.expect(jsonData.accountConsent.access).to.have.property(\"accountAdditionalInformationAccess\");",
											"    pm.expect(jsonData.accountConsent.access.accountAdditionalInformationAccess).to.have.property(\"ownerName\");",
											"});",
											"",
											"pm.test(\"Owner name is correct\", ()=> {",
											"    ownerName = jsonData.accountConsent.access.accountAdditionalInformationAccess.ownerName[0];",
											"",
											"    pm.expect(ownerName.iban).to.equal('DE80760700240271232400');",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. update in cms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"accountAccess\": {\n        \"accounts\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"accountAdditionalInformationAccess\": {\n            \"ownerName\": [\n                {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_none}}\"\n            }\n            ]\n        }\n    },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2025-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"Owner name is present\", ()=> {",
											"    pm.expect(jsonData.accountConsent.access).to.have.property(\"accountAdditionalInformationAccess\");",
											"    pm.expect(jsonData.accountConsent.access.accountAdditionalInformationAccess).to.have.property(\"ownerName\");",
											"});",
											"",
											"pm.test(\"Owner name is correct\", ()=> {",
											"    ownerName = jsonData.accountConsent.access.accountAdditionalInformationAccess.ownerName[0];",
											"",
											"    pm.expect(ownerName.iban).to.equal('DE69760700240340283600');",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. update in cms without owner name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{x_request_id}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"accountAccess\": {\n        \"accounts\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ]\n    },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2025-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"Owner name is present\", ()=> {",
											"    pm.expect(jsonData.accountConsent.access).to.have.property(\"accountAdditionalInformationAccess\");",
											"    pm.expect(jsonData.accountConsent.access.accountAdditionalInformationAccess).to.have.property(\"ownerName\");",
											"});",
											"",
											"pm.test(\"Owner name is empty\", ()=> {",
											"    ownerName = jsonData.accountConsent.access.accountAdditionalInformationAccess.ownerName;",
											"    ",
											"    pm.expect(ownerName).to.be.empty;",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Consent Bank offered with trusted beneficiaries",
					"item": [
						{
							"name": "1. Enable bank offered consent support in ASPSP profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67af457a-0c1a-44da-8b16-9af106584c29",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ais\": {\n      \"consentTypes\": {\n        \"bankOfferedConsentSupported\": true,\n        \"globalConsentSupported\": false,\n        \"availableAccountsConsentSupported\": true,\n        \"accountAccessFrequencyPerDay\": 4,\n        \"notConfirmedConsentExpirationTimeMs\": 86400000,\n        \"maxConsentValidityDays\": 0,\n        \"trustedBeneficiariesSupported\": true\n      },\n      \"redirectLinkToOnlineBanking\": {\n        \"aisRedirectUrlToAspsp\": \"http://localhost:4200/ais/{redirect-id}/{encrypted-consent-id}\"\n      },\n      \"transactionParameters\": {\n        \"availableBookingStatuses\": [\n          \"BOTH\"\n        ],\n        \"transactionsWithoutBalancesSupported\": false,\n            \"supportedTransactionApplicationTypes\": [\n            \t\"application/json\"\n            ]\n      },\n      \"deltaReportSettings\": {\n        \"entryReferenceFromSupported\": false,\n        \"deltaListSupported\": false\n      },\n      \"scaRequirementsForOneTimeConsents\": {\n        \"scaByOneTimeAvailableAccountsConsentRequired\": true,\n            \"scaByOneTimeGlobalConsentRequired\": true\n      }\n    },\n    \"pis\": {\n      \"supportedPaymentTypeAndProductMatrix\": {\n        \"payments\": [\n          \"sepa-credit-transfers\",\n          \"instant-sepa-credit-transfers\"\n        ]\n      },\n      \"maxTransactionValidityDays\": 0,\n      \"notConfirmedPaymentExpirationTimeMs\": 86400000,\n      \"paymentCancellationAuthorisationMandated\": false,\n      \"redirectLinkToOnlineBanking\": {\n        \"pisRedirectUrlToAspsp\": \"http://localhost:4200/pis/{redirect-id}/{encrypted-payment-id}\",\n        \"pisPaymentCancellationRedirectUrlToAspsp\": \"http://localhost:4200/pis/cancellation/{redirect-id}/{encrypted-payment-id}\",\n        \"paymentCancellationRedirectUrlExpirationTimeMs\": 600000\n      },\n        \"supportedTransactionStatusFormats\": [\n            \"application/json\"\n        ]\n    },\n    \"piis\": {\n      \"piisConsentSupported\": false\n    },\n    \"common\": {\n      \"scaRedirectFlow\": \"REDIRECT\",\n      \"startAuthorisationMode\": \"auto\",\n      \"tppSignatureRequired\": false,\n      \"psuInInitialRequestMandated\": false,\n      \"redirectUrlExpirationTimeMs\": 600000,\n      \"authorisationExpirationTimeMs\": 86400000,\n      \"forceXs2aBaseLinksUrl\": false,\n      \"xs2aBaseLinksUrl\": \"http://myhost.com/\",\n      \"supportedAccountReferenceFields\": [\n        \"IBAN\"\n      ],\n      \"multicurrencyAccountLevelSupported\": \"SUBACCOUNT\",\n      \"aisPisSessionsSupported\": false,\n      \"signingBasketSupported\": false,\n      \"aspspNotificationsSupported\": [\n        \t\"NONE\"\t\n      ],\n     \t\"authorisationConfirmationRequestMandated\": false,\n      \"authorisationConfirmationCheckByXs2a\": false, \n    \t\"checkUriComplianceToDomainSupported\": false \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/aspsp-settings",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"aspsp-settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set redirect SCA approach",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e875b7ad-3c8b-4f08-b713-0ab4ebb3dbbb",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n\"REDIRECT\",\n  \"EMBEDDED\",\n  \"DECOUPLED\"\n]"
								},
								"url": {
									"raw": "{{protocol}}://{{url_aspsp_profile}}/api/v1/aspsp-profile/for-debug/sca-approaches",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_aspsp_profile}}"
									],
									"path": [
										"api",
										"v1",
										"aspsp-profile",
										"for-debug",
										"sca-approaches"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. create consent bank offered",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce918dd0-6631-4518-b6f5-fdc4f308740a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Consent Id exists\", () => {",
											"   pm.expect(jsonData).to.have.property('consentId');",
											"});",
											"",
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"scaRedirect link exists\", () => {",
											"    pm.expect(jsonData).to.have.property('_links');",
											"    const _links = jsonData._links;",
											"    ",
											"    var scaRedirect = _links.scaRedirect.href;",
											"",
											"    if (scaRedirect === undefined) {",
											"       pm.expect().fail();",
											"    } ",
											"    ",
											"    if (scaRedirect !== undefined) {",
											"        var a = scaRedirect.split('/');",
											"        a.pop();",
											"        const authorisationId = a.pop();",
											"        pm.globals.set(\"authorisation_id\", authorisationId);",
											"    }",
											"",
											"    const scaStatusParts = jsonData._links.scaStatus.href.split('/');",
											"    const redirectId = scaStatusParts.pop() || scaStatusParts.pop();",
											"    pm.globals.set(\"redirect_id\", redirectId);",
											"    ",
											"});",
											"",
											"pm.test(\"Consent status is received\", () => {",
											"    pm.expect(jsonData.consentStatus).to.eql('received');",
											"});",
											"",
											"pm.globals.set(\"consent_id\", jsonData.consentId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b421d8cf-914b-4f0f-906d-198ed1045657",
										"exec": [
											"pm.globals.unset(\"consent_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "PSU-ID",
										"value": "{{psu_id_single}}",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "psu-ip-address",
										"value": "{{ip_address}}",
										"type": "text"
									},
									{
										"key": "tpp-redirect-uri",
										"value": "{{tpp-redirect-uri}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"access\": {\n        \"accounts\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"additionalInformation\": {\n             \"trustedBeneficiaries\": [\n                {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n            ]\n        }\n    },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 10,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2021-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_xs2a}}"
									],
									"path": [
										"v1",
										"consents"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"Trusted benficiaries are present\", ()=> {",
											"    pm.expect(jsonData.accountConsent.access).to.have.property(\"accountAdditionalInformationAccess\");",
											"    pm.expect(jsonData.accountConsent.access.accountAdditionalInformationAccess).to.have.property(\"trustedBeneficiaries\");",
											"});",
											"",
											"pm.test(\"Trusted benficiaries are correct\", ()=> {",
											"    trustedBeneficiaries = jsonData.accountConsent.access.accountAdditionalInformationAccess.trustedBeneficiaries[0];",
											"",
											"    pm.expect(trustedBeneficiaries.iban).to.equal('DE80760700240271232400');",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. update in cms",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-ID",
										"value": "{{x_request_id}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"accountAccess\": {\n        \"accounts\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"accountAdditionalInformationAccess\": {\n             \"trustedBeneficiaries\": [\n                {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_none}}\"\n            }\n            ]\n        }\n    },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2025-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"pm.test(\"Trusted benficiaries are present\", ()=> {",
											"    pm.expect(jsonData.accountConsent.access).to.have.property(\"accountAdditionalInformationAccess\");",
											"    pm.expect(jsonData.accountConsent.access.accountAdditionalInformationAccess).to.have.property(\"trustedBeneficiaries\");",
											"});",
											"",
											"pm.test(\"Trusted benficiaries are correct\", ()=> {",
											"    trustedBeneficiaries = jsonData.accountConsent.access.accountAdditionalInformationAccess.trustedBeneficiaries[0];",
											"",
											"    pm.expect(trustedBeneficiaries.iban).to.equal('DE69760700240340283600');",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. update in cms without trusted beneficiaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-Request-ID",
										"type": "text",
										"value": "{{x_request_id}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"accountAccess\": {\n        \"accounts\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"balances\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ],\n        \"transactions\": [\n            {\n                \"currency\": \"EUR\",\n                \"iban\": \"{{iban_single}}\"\n            }\n        ]\n    },\n  \"combinedServiceIndicator\": false,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2025-10-10\"\n}"
								},
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/{{internal_consent_id}}/save-access",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"{{internal_consent_id}}",
										"save-access"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get consent response object by redirect id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5bf291c-591b-452c-9609-537cd0cb7050",
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Authorisation id is present\", () => {",
											"    pm.expect(jsonData).to.have.property(\"authorisationId\");",
											"});",
											"",
											"const authorisationId = jsonData.authorisationId;",
											"pm.test(\"Authorisation id is correct\", () => {",
											"    pm.expect(authorisationId).to.eql(pm.globals.get(\"redirect_id\"));",
											"});",
											"",
											"pm.test(\"Consent id is present\", () => {",
											"    pm.expect(jsonData.accountConsent).to.have.property(\"id\");",
											"});",
											"",
											"",
											"pm.test(\"Trusted benficiaries are present\", ()=> {",
											"    pm.expect(jsonData.accountConsent.access).to.have.property(\"accountAdditionalInformationAccess\");",
											"    pm.expect(jsonData.accountConsent.access.accountAdditionalInformationAccess).to.have.property(\"trustedBeneficiaries\");",
											"});",
											"",
											"pm.test(\"Trusted benficiaries are empty\", ()=> {",
											"    trustedBeneficiaries = jsonData.accountConsent.access.accountAdditionalInformationAccess.trustedBeneficiaries;",
											"",
											"    pm.expect(trustedBeneficiaries).to.be.empty;",
											"});",
											"",
											"pm.globals.set(\"internal_consent_id\", jsonData.accountConsent.id);",
											"pm.globals.set(\"authorisation_id\", authorisationId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76336274-4edd-4754-be5d-a1367287a5ea",
										"exec": [
											"pm.globals.unset(\"internal_consent_id\");",
											"pm.globals.unset(\"authorisation_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{url_cms}}/psu-api/v1/ais/consent/redirect/{{redirect_id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{url_cms}}"
									],
									"path": [
										"psu-api",
										"v1",
										"ais",
										"consent",
										"redirect",
										"{{redirect_id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}